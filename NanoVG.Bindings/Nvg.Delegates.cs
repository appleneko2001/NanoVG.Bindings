using System;
using System.Numerics;
using System.Runtime.InteropServices;

namespace NanoVG;

public unsafe partial class Nvg
{
        // Delegate types
        private delegate NvgContext CreateGLES3Delegate(int flags);
        private delegate NvgContext CreateGLES2Delegate(int flags);
        private delegate void DeleteGLES2Delegate(NvgContext ctx);
        private delegate void DeleteGLES3Delegate(NvgContext ctx);
        private delegate NvgContext CreateInternalDelegate(IntPtr @params);
        private delegate void DeleteInternalDelegate(NvgContext ctx);
        private delegate float TextDelegate(NvgContext ctx, float x, float y, [MarshalAs(UnmanagedType.LPStr)] string str, IntPtr end);
        private delegate int CreateFontDelegate(NvgContext ctx, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string filename);
        private delegate void FontFaceDelegate(NvgContext ctx, [MarshalAs(UnmanagedType.LPStr)] string font);
        private delegate void BeginFrameDelegate(NvgContext ctx, float windowWidth, float windowHeight, float devicePixelRatio);
        private delegate void CancelFrameDelegate(NvgContext ctx);
        private delegate void EndFrameDelegate(NvgContext ctx);
        private delegate void GlobalCompositeOperationDelegate(NvgContext ctx, int op);
        private delegate void GlobalCompositeBlendFuncDelegate(NvgContext ctx, int sfactor, int dfactor);
        private delegate void GlobalCompositeBlendFuncSeparateDelegate(NvgContext ctx, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
        private delegate Vector4 RGBDelegate(byte r, byte g, byte b);
        private delegate Vector4 RGBfDelegate(float r, float g, float b);
        private delegate Vector4 RGBADelegate(byte r, byte g, byte b, byte a);
        private delegate Vector4 RGBAfDelegate(float r, float g, float b, float a);
        private delegate Vector4 LerpRGBADelegate(Vector4 c0, Vector4 c1, float u);
        private delegate Vector4 TransRGBADelegate(Vector4 c0, byte a);
        private delegate Vector4 TransRGBAfDelegate(Vector4 c0, float a);
        private delegate Vector4 HSLDelegate(float h, float s, float l);
        private delegate Vector4 HSLADelegate(float h, float s, float l, byte a);
        private delegate void SaveDelegate(NvgContext ctx);
        private delegate void RestoreDelegate(NvgContext ctx);
        private delegate void ResetDelegate(NvgContext ctx);
        private delegate void ShapeAntiAliasDelegate(NvgContext ctx, int enabled);
        private delegate void StrokeColorDelegate(NvgContext ctx, Vector4 color);
        private delegate void StrokePaintDelegate(NvgContext ctx, NvgPaint paint);
        private delegate void FillColorDelegate(NvgContext ctx, Vector4 color);
        private delegate void FillPaintDelegate(NvgContext ctx, NvgPaint paint);
        private delegate void MiterLimitDelegate(NvgContext ctx, float limit);
        private delegate void StrokeWidthDelegate(NvgContext ctx, float size);
        private delegate void LineCapDelegate(NvgContext ctx, int cap);
        private delegate void LineCapEnumDelegate(NvgContext ctx, NvgLineCap cap);
        private delegate void LineJoinDelegate(NvgContext ctx, int join);
        private delegate void LineJoinEnumDelegate(NvgContext ctx, NvgLineCap join);
        private delegate void GlobalAlphaDelegate(NvgContext ctx, float alpha);
        private delegate void ResetTransformDelegate(NvgContext ctx);
        private delegate void TransformDelegate(NvgContext ctx, float a, float b, float c, float d, float e, float f);
        private delegate void TranslateDelegate(NvgContext ctx, float x, float y);
        private delegate void RotateDelegate(NvgContext ctx, float angle);
        private delegate void SkewXDelegate(NvgContext ctx, float angle);
        private delegate void SkewYDelegate(NvgContext ctx, float angle);
        private delegate void ScaleDelegate(NvgContext ctx, float x, float y);
        private delegate void CurrentTransformDelegate(NvgContext ctx, float* xform);
        private delegate void CurrentTransformMatDelegate(NvgContext ctx, out Matrix3x2 mat);
        private delegate void TransformIdentityDelegate(float* dst);
        private delegate void TransformTranslateDelegate(float* dst, float tx, float ty);
        private delegate void TransformScaleDelegate(float* dst, float sx, float sy);
        private delegate void TransformRotateDelegate(float* dst, float a);
        private delegate void TransformSkewXDelegate(float* dst, float a);
        private delegate void TransformSkewYDelegate(float* dst, float a);
        private delegate void TransformMultiplyDelegate(float* dst, float* src);
        private delegate void TransformPremultiplyDelegate(float* dst, float* src);
        private delegate int TransformInverseDelegate(float* dst, float* src);
        private delegate void TransformPointDelegate(float* dstX, float* dstY, float* xForm, float srcX, float srcY);
        private delegate float DegToRadDelegate(float deg);
        private delegate float RadToDegDelegate(float rad);
        private delegate int CreateImageDelegate(NvgContext ctx, byte[] filename, int imageFlags);
        private delegate int CreateImageMemDelegate(NvgContext ctx, int imageFlags, byte* data, int nData);
        private delegate int CreateImageRGBADelegate(NvgContext ctx, int w, int h, int imageFlags, byte* data);
        private delegate void UpdateImageDelegate(NvgContext ctx, int image, byte* data);
        private delegate void ImageSizeDelegate(NvgContext ctx, int image, int* w, int* h);
        private delegate void ImageSizeOutDelegate(NvgContext ctx, int image, out int w, out int h);
        private delegate void DeleteImageDelegate(NvgContext ctx, int image);
        private delegate NvgPaint LinearGradientDelegate(NvgContext ctx, float sx, float sy, float ex, float ey, Vector4 iCol, Vector4 oCol);
        private delegate NvgPaint BoxGradientDelegate(NvgContext ctx, float x, float y, float w, float h, float r, float f, Vector4 iCol, Vector4 oCol);
        private delegate NvgPaint RadialGradientDelegate(NvgContext ctx, float cx, float cy, float inR, float outR, Vector4 iCol, Vector4 oCol);
        private delegate NvgPaint ImagePatternDelegate(NvgContext ctx, float ox, float oy, float ex, float ey, float angle, int image, float alpha);
        private delegate void ScissorDelegate(NvgContext ctx, float x, float y, float w, float h);
        private delegate void IntersectScissorDelegate(NvgContext ctx, float x, float y, float w, float h);
        private delegate void ResetScissorDelegate(NvgContext ctx);
        private delegate void BeginPathDelegate(NvgContext ctx);
        private delegate void MoveToDelegate(NvgContext ctx, float x, float y);
        private delegate void LineToDelegate(NvgContext ctx, float x, float y);
        private delegate void BezierToDelegate(NvgContext ctx, float c1x, float c1y, float c2x, float c2y, float x, float y);
        private delegate void QuadToDelegate(NvgContext ctx, float cx, float cy, float x, float y);
        private delegate void ArcToDelegate(NvgContext ctx, float x1, float y1, float x2, float y2, float radius);
        private delegate void ClosePathDelegate(NvgContext ctx);
        private delegate void PathWindingDelegate(NvgContext ctx,NvgSolidity dir);
        private delegate void ArcDelegate(NvgContext ctx, float cx, float cy, float r, float a0, float a1, NvgWinding dir);
        private delegate void RectDelegate(NvgContext ctx, float x, float y, float w, float h);
        private delegate void RoundedRectDelegate(NvgContext ctx, float x, float y, float w, float h, float r);
        private delegate void RoundedRectVaryingDelegate(NvgContext ctx, float x, float y, float w, float h, float radTopLeft, float radTopRight, float radBottomRight, float radBottomLeft);
        private delegate void EllipseDelegate(NvgContext ctx, float cx, float cy, float rx, float ry);
        private delegate void CircleDelegate(NvgContext ctx, float cx, float cy, float r);
        private delegate void FillDelegate(NvgContext ctx);
        private delegate void StrokeDelegate(NvgContext ctx);
        private delegate int CreateFontRawDelegate(NvgContext ctx, IntPtr name,IntPtr filename);
        private delegate int CreateFontMemDelegate(NvgContext ctx, [MarshalAs(UnmanagedType.LPStr)]string name, IntPtr data, int nData, int freeData);
        private delegate int FindFontDelegate(NvgContext ctx, [MarshalAs(UnmanagedType.LPStr)]string name);
        private delegate int AddFallbackFontIdDelegate(NvgContext ctx, int baseFont, int fallbackFont);
        private delegate int AddFallbackFontDelegate(NvgContext ctx, byte[] baseFont, byte[] fallbackFont);
        private delegate void FontSizeDelegate(NvgContext ctx,float size);
        private delegate void FontBlurDelegate(NvgContext ctx,float blur);
        private delegate void TextLetterSpacingDelegate(NvgContext ctx,float spacing);
        private delegate void TextLineHeightDelegate(NvgContext ctx,float lineHeight);
        private delegate void TextAlignDelegate(NvgContext ctx,NvgAlign align);
        private delegate void FontFaceIdDelegate(NvgContext ctx,int font);
        private delegate void FontFaceByteArrayDelegate(NvgContext ctx,byte[] font);
        private delegate float TextIntPtrDelegate(NvgContext ctx, float x, float y, IntPtr str, IntPtr end);
        private delegate float TextVoidPtrDelegate(NvgContext ctx, float x, float y, void* str, void* end);
        private delegate void TextBoxDelegate(NvgContext ctx, float x, float y, float breakRowWidth, IntPtr str, IntPtr end);
        private delegate float TextBoundsStringDelegate(NvgContext ctx, float x, float y, [MarshalAs(UnmanagedType.LPStr)] string str, IntPtr end, [Out] float[] bounds);
        private delegate float TextBoundsIntPtrArrayDelegate(NvgContext ctx, float x, float y, IntPtr str, IntPtr end, [Out] float[] bounds);
        private delegate float TextBoundsIntPtrVector4Delegate(NvgContext ctx, float x, float y, IntPtr str, IntPtr end, ref Vector4 bounds);
        private delegate void TextMetricsDelegate(NvgContext ctx,float* ascender, float* descender, float* lineH);
        private delegate void TextMetricsOutDelegate(NvgContext ctx,out float ascender, out float descender, out float lineH);
        private delegate int TextBreakLinesDelegate(NvgContext ctx, IntPtr str, IntPtr endOfStr, float breakRowWidth, [Out] NvgTextRow[] rows, int maxRows);
        private delegate int TextGlyphPositionsVoidPtrDelegate(NvgContext ctx, float x, float y, void* str, void* end, NVGglyphPosition[] positions, int maxPositions);
        private delegate int TextGlyphPositionsIntPtrDelegate(NvgContext ctx, float x, float y, IntPtr str, IntPtr end, [Out] NVGglyphPosition[] positions, int maxPositions);
        private delegate int CreateImageStringDelegate(NvgContext ctx, string filename, int imageFlags);
        private delegate void TextBoxBoundsFloatArrayDelegate(NvgContext ctx, float x, float y, float breakRowWidth, IntPtr str, IntPtr endOfStr, ref float[] bounds);
        private delegate void TextBoxBoundsVector4Delegate(NvgContext ctx, float x, float y, float breakRowWidth, IntPtr str, IntPtr endOfStr, ref Vector4 bounds);
        private delegate void TextBoxBoundsStringDelegate(NvgContext ctx, float x, float y, float breakRowWidth, [MarshalAs(UnmanagedType.LPStr)] string str, IntPtr endOfStr, ref Vector4 bounds);

}